5. Inner Join
Pk와 Fk가 맞는 부분만 Join하여 출력한다.

ex) select first_name, last_name, order_date, amount from customers
join orders on orders.customer_id = customers.id;
=> select 원하는 칼럼 나열 from 왼쪽 Join 테이블 Join 오른쪽 Join 테이블 on Left테이블명.pk(fk) = Right테이블 명.fk(px) => Pk와 FK가 맞는 부분만 출력된다./ 이 때 on 조건에 Left, Right의 순서는 상관없다. 다만 from의 테이블이 왼쪽에 나오고 Join 테이블이 오른쪽에 나온다.  
=> on조건에 테이블.칼럼명을 쓰는 이유는 MySQL이 Id가 두 개인데 무엇일 사용할 지 몰라서 사용자가 규정해주는 것이다. 만약 칼럼명이 명확하다면 안써도 된다.

ex) select * from orders 
inner join customers on customers.id = orders.customer_id;
=> 기본적으로 Join은 Inner join이다. Ineer Join일 때는 Inner을 생략해도 된다.


6. Inner Join And Group By
join은 항상 from 다음에 온다. 또한 조인된 결과에 Group By나 Order By를 사용할 수 있다.

ex) Select first_name, last_name, sum(amount) as total from customers
inner join orders on customers.id = orders.customer_id
group by first_name, last_name
order by total desc; 


6. Left Join
Left Join을 사용하면 왼쪽 테이블로 Customers를 쓰고 오른쪽 테이블로 orders를 쓰면 왼쪽의 모든 행을 가져온다.
왼쪽은 모든 것을 보여주고 오른쪽은 겹치는 것만 보여준다.

ex) select first_name, last_name, order_date, amount from customers
left join orders on customers.id = orders.customer_id;
=> Left Join이라서 왼쪽의 customers의 데이터는 모두 출력되고 오른쪽 테이블은 일치하는 것은 매칭하고 일치하지 않는 것은 null을 준다.

ex) select first_name, last_name, order_date, amount from orders
left join customers on customers.id = orders.customer_id; 
=> Inner Join과 같은 데이터가 나오는 데 올바른 결과이다. Orders 테이블에는 주문 내역이 존재하고 모두 출력된다. 그리고 주문id와 고객id를 뽑아내는 조인이라 Inner Join과 같은 것이다.

 













































